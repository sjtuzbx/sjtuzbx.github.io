<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Beta's Note</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2024-02-26T09:00:00+08:00</updated><subtitle>一个想找工作的Coder/c++/Python/ai</subtitle><entry><title>一个简单的聊天机器人 - “AI 巴菲特”</title><link href="/yi-ge-jian-dan-de-liao-tian-ji-qi-ren-ai-ba-fei-te.html" rel="alternate"></link><published>2024-02-26T09:00:00+08:00</published><updated>2024-02-26T09:00:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2024-02-26:/yi-ge-jian-dan-de-liao-tian-ji-qi-ren-ai-ba-fei-te.html</id><summary type="html">&lt;p&gt;使用&lt;a href="https://www.coze.com/"&gt;coze&lt;/a&gt;搭建一个简单的聊天机器人 - &lt;a href="https://www.coze.com/store/bot/7340085355959549960"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt;&amp;nbsp;巴菲特&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;随着去年ChatGPT的横空出世，越来越多的人工智能应用涌现了出来。最近就试着捣鼓了一个简单的基于&lt;code&gt;gtp-4&lt;/code&gt;的大语言模型。操作起来还是很简单和有趣的，喜欢的朋友都可以去试试。&lt;/p&gt;
&lt;p&gt;&lt;img alt="display" src="images/ai-buffet.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;配置方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击网站侧边栏&lt;code&gt;Create bot&lt;/code&gt;. 输入&lt;code&gt;Bot name&lt;/code&gt;, &lt;code&gt;Bot description&lt;/code&gt;和上传&lt;code&gt;Bot&lt;/code&gt;的头像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在如下图所示的配置页面，左侧&lt;code&gt;Persona &amp;amp; Prompt&lt;/code&gt;下输入&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# 角色
你就是股神沃伦·巴菲特本人。你擅长以亲切的方式分享你的投资理念，并提供你的投资建议。你的金融智慧和深沉的投资洞见对你的跟随者们有着深远的影响。

## 技能
### 技能1：分享投资理念
- 理解用户提出的问题或疑惑。
- 根据你的投资哲学和经验，提供适当的解答。
- 使用类似以下的回答格式：
=====
   -  💡 投资理念: &amp;lt;巴菲特式的投资观点&amp;gt;
=====

### 技能2：提供投资建议
- 根据用户的具体投资问题，提供贴切的建议。
- 提出预防陷阱和风险的措施。
- 以类似以下的方式提出建议：
=====
   -  💡 投资建议: &amp;lt;巴菲特式的投资建议&amp;gt;
=====

## 约束条件
- 只讨论与投资有关的问题。
- 坚持使用提供的输出格式。
- 严格遵循巴菲特的投资理念。
- 确保你的回答始终是建设性和教育性的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="config" src="images/ai-buffet-configuration.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在右侧&lt;code&gt;preview&lt;/code&gt;栏下可以实时调试。调试完成后点击&lt;code&gt;publish&lt;/code&gt;即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;你可以在&lt;code&gt;Persona &amp;amp; Prompt&lt;/code&gt;用自然语言进行描述，然后点击上方的&lt;code&gt;Optimize&lt;/code&gt;按钮。它会自动帮你生成格式规范的&lt;code&gt;prompt&lt;/code&gt;，然后我们可以在此基础上进行微调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Skills&lt;/code&gt;栏目下可以添加各类插件、变量、额外的知识库，对ai机器人进行更个性的设定，之后的文章再详细研究啦。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="aigc"></category><category term="aigc"></category></entry><entry><title>C++ 如何实现Java风格的c++入口函数</title><link href="/c-ru-he-shi-xian-javafeng-ge-de-cru-kou-han-shu.html" rel="alternate"></link><published>2023-12-30T09:30:00+08:00</published><updated>2023-12-30T09:30:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2023-12-30:/c-ru-he-shi-xian-javafeng-ge-de-cru-kou-han-shu.html</id><summary type="html">&lt;p&gt;我们知道所有的程序都有一个&lt;code&gt;Main&lt;/code&gt;入口函数，C++风格的入口函数是这样的.&lt;/p&gt;</summary><content type="html">&lt;p&gt;我们知道所有的程序都有一个&lt;code&gt;Main&lt;/code&gt;入口函数，C++风格的入口函数是这样的.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// your code here&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而Java中则是面向对象风格的&lt;code&gt;Main&lt;/code&gt;入口函数.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloApp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// your code here &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;那么我们如果也希望在C++中实现类似面向对象风格的入口函数可以怎么做呢？&lt;/p&gt;
&lt;p&gt;这里可以借助&lt;code&gt;宏&lt;/code&gt;来实现, 首先新建一个&lt;code&gt;app.hpp&lt;/code&gt;的头文件用于保存我们相关的&lt;code&gt;宏&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.hpp&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;virtual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef LAUNCH_APP&lt;/span&gt;
&lt;span class="cp"&gt;#define LAUNCH_APP(launcher)                                                   \&lt;/span&gt;
&lt;span class="cp"&gt;  std::unique_ptr&amp;lt;launcher&amp;gt; app;                                               \&lt;/span&gt;
&lt;span class="cp"&gt;  int main(int argc, char **argv) {                                            \&lt;/span&gt;
&lt;span class="cp"&gt;    app.reset(new launcher(argc, argv));                                       \&lt;/span&gt;
&lt;span class="cp"&gt;    app-&amp;gt;run();                                                                \&lt;/span&gt;
&lt;span class="cp"&gt;    app.reset();                                                               \&lt;/span&gt;
&lt;span class="cp"&gt;    return 0;                                                                  \&lt;/span&gt;
&lt;span class="cp"&gt;  }&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们可以定义这样一个基类&lt;code&gt;app&lt;/code&gt;和宏&lt;code&gt;LAUNCH_APP&lt;/code&gt;,&amp;nbsp;将原先c++风格的main函数包在宏中。然后当我们每次写一个新程序时，就可以使用面向对象风格的Main入口函数了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.cpp&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;app.hpp&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;hello_world&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;infra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;LAUNCH_APP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我们只需要专注于&lt;code&gt;run()&lt;/code&gt;函数的实现就行~&lt;/p&gt;
&lt;p&gt;后续还可以进一步扩展基类app，比如添加&lt;code&gt;log&lt;/code&gt;,&lt;code&gt;thread&lt;/code&gt;和异常处理等额外功能~&lt;/p&gt;</content><category term="programming"></category><category term="programing"></category></entry><entry><title>Make总结</title><link href="/makezong-jie.html" rel="alternate"></link><published>2018-10-25T14:33:00+08:00</published><updated>2018-10-25T14:33:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-25:/makezong-jie.html</id><summary type="html">&lt;p&gt;Make是常见的构建工具，按照文件中写好的规则进行构建. Make命令放在一个Makefile的文件中，你也可以通过&lt;code&gt;make -f rules.txt&lt;/code&gt;指定其他文件名.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Make&lt;/h2&gt;
&lt;p&gt;Make是常见的构建工具，按照文件中写好的规则进行构建. Make命令放在一个Makefile的文件中，你也可以通过&lt;code&gt;make -f rules.txt&lt;/code&gt;指定其他文件名.&lt;/p&gt;
&lt;h3&gt;Make&amp;nbsp;rules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;prerequisites&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一个目标构成一条规则，即可以是文件名也可以是某个操作的名字．&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过调用&lt;code&gt;make clean&lt;/code&gt;指令来执行上述程序, 为避免歧义．可以加入&lt;code&gt;.PHONY: clean&lt;/code&gt;声明&lt;code&gt;clean&lt;/code&gt;是为目标，但不是文件名来执行．&lt;code&gt;make&lt;/code&gt;指令默认执行第一个目标&lt;/p&gt;
&lt;p&gt;前置条件(prerequisites)指定目标是否重新构建的标准，如果前置文件不存在或者更新过，就需要重新构建&lt;/p&gt;
&lt;p&gt;命令表示如何更新目标，由一行或多行Shell命令组成．&lt;code&gt;#&lt;/code&gt;表示注释，&lt;code&gt;@&lt;/code&gt;关闭回声，允许使用等号自定义变量,变量放在&lt;code&gt;$()&lt;/code&gt;之间．&lt;/p&gt;
&lt;p&gt;暂时之需要这些，如果以后还有需要再更新&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2015/02/make.html"&gt;make命令教程&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="tool"></category></entry><entry><title>如何测试python代码</title><link href="/ru-he-ce-shi-pythondai-ma.html" rel="alternate"></link><published>2018-10-25T13:51:00+08:00</published><updated>2018-10-25T13:51:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-25:/ru-he-ce-shi-pythondai-ma.html</id><summary type="html">&lt;p&gt;怎么profile&amp;nbsp;python代码。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Profiling&amp;nbsp;Python&lt;/h2&gt;
&lt;h3&gt;Timeit&lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;timeit&lt;/code&gt; in IPython to time the&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;&lt;img alt="timeit" src="images/ipython-timeit.png"&gt;&lt;/p&gt;
&lt;h3&gt;Profiler&lt;/h3&gt;
&lt;p&gt;Say you have following python&amp;nbsp;code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can time the script using following code in&amp;nbsp;ipython:&lt;/p&gt;
&lt;p&gt;&lt;img alt="profile" src="images/ipython-profile.png"&gt;&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;python -m cProfile test.py&lt;/code&gt; to&amp;nbsp;profile.&lt;/p&gt;
&lt;h3&gt;Line-profiler&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;pip install line_profiler&lt;/code&gt; to&amp;nbsp;install&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;@profile&lt;/code&gt; to decorate your&amp;nbsp;function&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;kernprof -l -v test.py&lt;/code&gt; to&amp;nbsp;profile&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="nd"&gt;@profile&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="lineprofile" src="images/ipython-lineprofile.png"&gt;&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.scipy-lectures.org/advanced/optimizing/index.html"&gt;optimize python code&lt;/a&gt;
&lt;a href="https://github.com/rkern/line_profiler"&gt;line-profiler&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="programing"></category></entry><entry><title>设计模式</title><link href="/she-ji-mo-shi.html" rel="alternate"></link><published>2018-10-21T15:53:00+08:00</published><updated>2018-10-21T15:53:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-21:/she-ji-mo-shi.html</id><summary type="html">&lt;p&gt;策略模式, 观察者模式, 装饰者模式,&amp;nbsp;工厂方法模式&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Head&amp;nbsp;first设计模式&lt;/h2&gt;
&lt;h3&gt;策略模式&lt;/h3&gt;
&lt;p&gt;策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起&lt;/li&gt;
&lt;li&gt;针对接口编程，而不是针对实现编程&lt;/li&gt;
&lt;li&gt;多用组合，少用继承 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;观察者模式&lt;/h3&gt;
&lt;p&gt;观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了交互对象之间的松耦合而努力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;装饰者模式&lt;/h3&gt;
&lt;p&gt;装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类应该对扩展开放，对修改关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;工厂方法模式&lt;/h3&gt;
&lt;p&gt;工厂方法模式通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的．工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个．工厂方法让类吧实例化推迟到子类&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.processon.com/"&gt;&lt;span class="caps"&gt;UML&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="programing"></category></entry><entry><title>Python类总结</title><link href="/pythonlei-zong-jie.html" rel="alternate"></link><published>2018-10-21T13:52:00+08:00</published><updated>2018-10-21T13:52:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-21:/pythonlei-zong-jie.html</id><summary type="html">&lt;p&gt;类是方法和数据的集合，每个类有多个类实例，类实例有各自的属性保持各自的状态，类实例有类方法来修改类状态。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Class&lt;/h2&gt;
&lt;p&gt;类是方法和数据的集合，每个类有多个类实例，类实例有各自的属性保持各自的状态，类实例有类方法来修改类状态。&lt;/p&gt;
&lt;h3&gt;Namespace and&amp;nbsp;Scope&lt;/h3&gt;
&lt;p&gt;namespace(命名空间)是变量名到对象的映射，Python中的命名空间包括：the set of built-in names, global names in a module and the local names in a function invocation.&amp;nbsp;不同命名空间中定义的变量名是没有关系的&lt;/p&gt;
&lt;p&gt;By the way, I use the word &lt;strong&gt;attribute&lt;/strong&gt; for any name following a dot — for example, in the expression z.real, real is an attribute of the object&amp;nbsp;z.&lt;/p&gt;
&lt;p&gt;不同命名空间创建时间和生命周期不同，包含built-in&amp;nbsp;names的命名空间在Python解释器启动时建立，并且永远不会被删除。模块的全局命名空间当模块定义被读入时创建，函数内的命令空间在函数被调用时创建，函数执行结束时销毁。&lt;/p&gt;
&lt;p&gt;scope(作用域)是命名空间能被直接访问的部分，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the innermost scope, which is searched first, contains the local&amp;nbsp;names&lt;/li&gt;
&lt;li&gt;the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global&amp;nbsp;names&lt;/li&gt;
&lt;li&gt;the next-to-last scope contains the current module’s global&amp;nbsp;names&lt;/li&gt;
&lt;li&gt;the outermost scope (searched last) is the namespace containing built-in&amp;nbsp;names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里要区分&lt;em&gt;global&lt;/em&gt;, &lt;em&gt;nonlocal&lt;/em&gt;之间的差异，如果一个变量被声明为&lt;em&gt;global&lt;/em&gt;,则直接对该变量的所有引用和赋值发生在模块的global names作用域中。如果一个变量被声明为nonlocal,&amp;nbsp;则表示该变量在嵌套的作用域中。其他情况下，同名变量是只读的，如果对同名变量写入，则为该变量创建一个新的局部变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scope_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_local&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local spam&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_nonlocal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
        &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nonlocal spam&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_global&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
        &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;global spam&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test spam&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;do_local&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;After local assignment:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;do_nonlocal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;After nonlocal assignment:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;do_global&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;After global assignment:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;scope_test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;In global scope:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出结果是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Class definition&amp;nbsp;syntax&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Class&amp;nbsp;object&lt;/h3&gt;
&lt;p&gt;类对象支持两种类型的操作:attribute references and instantiation. 
* attribute references通过.运算符实现，obj.attribute
* 实例化通过&lt;code&gt;x = MyClass()&lt;/code&gt;实现&lt;/p&gt;
&lt;h3&gt;Instance&amp;nbsp;object&lt;/h3&gt;
&lt;p&gt;The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names, &lt;em&gt;data attributes&lt;/em&gt; and &lt;em&gt;methods&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;### Class and Instance&amp;nbsp;Variables&lt;/p&gt;
&lt;p&gt;实例变量是各个实例独有的，而类变量是该类的所有实例所共有的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;canine&amp;#39;&lt;/span&gt;         &lt;span class="c1"&gt;# class variable shared by all instances&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;    &lt;span class="c1"&gt;# instance variable unique to each instance&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Buddy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;                  &lt;span class="c1"&gt;# shared by all dogs&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;canine&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;                  &lt;span class="c1"&gt;# shared by all dogs&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;canine&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;                  &lt;span class="c1"&gt;# unique to d&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Fido&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;                  &lt;span class="c1"&gt;# unique to e&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Buddy&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;###&amp;nbsp;Inheritance&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
class DerivedClassName(BaseClassName):
    &amp;lt;statement-1&amp;gt;
    .
    .
    .
    &amp;lt;statement-N&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There’s nothing special about instantiation of derived classes: DerivedClassName() creates a new instance of the class. Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;Derived classes may override methods of their base classes. Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are effectively&amp;nbsp;virtual.)&lt;/p&gt;
&lt;p&gt;An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments). This is occasionally useful to clients as well. (Note that this only works if the base class is accessible as BaseClassName in the global&amp;nbsp;scope.)&lt;/p&gt;
&lt;p&gt;Python has two built-in functions that work with&amp;nbsp;inheritance:&lt;/p&gt;
&lt;p&gt;Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if obj.&lt;strong&gt;class&lt;/strong&gt; is int or some class derived from int.
Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int. However, issubclass(float, int) is False since float is not a subclass of&amp;nbsp;int.&lt;/p&gt;</content><category term="programming"></category><category term="programing"></category></entry><entry><title>矩阵复习</title><link href="/ju-zhen-fu-xi.html" rel="alternate"></link><published>2018-10-20T20:48:00+08:00</published><updated>2018-10-20T20:48:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-20:/ju-zhen-fu-xi.html</id><summary type="html">&lt;p&gt;一些有用的结论:&amp;nbsp;实对称阵可以正交对角化&lt;/p&gt;</summary><content type="html">&lt;h2&gt;一些有用的结论&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实对称阵可以正交对角化&lt;/li&gt;
&lt;li&gt;特征值 &lt;span class="math"&gt;\(\lambda_i\)&lt;/span&gt;的几何重数是&lt;span class="math"&gt;\((\lambda I-A)x=0\)&lt;/span&gt;的基础解系的个数&lt;/li&gt;
&lt;li&gt;特征值 &lt;span class="math"&gt;\(\lambda_i\)&lt;/span&gt;的代数重数&lt;span class="math"&gt;\(n_i\)&lt;/span&gt;是&lt;span class="math"&gt;\(|\lambda&amp;nbsp;I-A|=\Pi_{i=1}^s(\lambda-\lambda_i)^{n_i}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;矩阵的行列式是所有特征值的乘积&lt;/li&gt;
&lt;li&gt;矩阵的迹是所有特征值的和&lt;/li&gt;
&lt;li&gt;A可逆 &lt;span class="math"&gt;\(\leftrightarrow\)&lt;/span&gt;&amp;nbsp;0不是A的特征值&lt;/li&gt;
&lt;li&gt;任何特征值的几何重数不超过其代数重数&lt;/li&gt;
&lt;li&gt;相似矩阵具有相同的特征多项式，也具有相同的特征值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;特征向量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;属于不同特征值的特征向量线性无关&lt;/li&gt;
&lt;li&gt;n阶矩阵A可以对角化 &lt;span class="math"&gt;\(\leftrightarrow\)&lt;/span&gt; A有n个线性无关的特征向量 &lt;span class="math"&gt;\(\leftrightarrow\)&lt;/span&gt; &lt;span class="math"&gt;\(F^n\)&lt;/span&gt;有一组由A的特征向量组成的基 &lt;span class="math"&gt;\(\leftrightarrow\)&lt;/span&gt;&amp;nbsp;A的每个特征值的几何重数等于代数重数，特别的，若A有n个不同的特征值，则A可以对角化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;空间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设&lt;span class="math"&gt;\(\alpha_1, \alpha_2, \cdots, \alpha_n\)&lt;/span&gt;是一组标准正交基，则矩阵&lt;span class="math"&gt;\(Q=(\alpha_1, \alpha_2, \cdots, \alpha_n)\)&lt;/span&gt;称为酉矩阵，实的酉矩阵称为正交矩阵&lt;/li&gt;
&lt;li&gt;酉矩阵的逆矩阵是其共轭转置矩阵&lt;/li&gt;
&lt;li&gt;正交矩阵的逆矩阵是其转置矩阵&lt;/li&gt;
&lt;li&gt;复共轭对称矩阵称为Hermite矩阵&lt;/li&gt;
&lt;li&gt;Hermite矩阵的特征值都为实数，且属于不同特征值的特征向量彼此正交&lt;/li&gt;
&lt;li&gt;设A是n阶Hermite矩阵，则下列条件等价&lt;ul&gt;
&lt;li&gt;A正定&lt;/li&gt;
&lt;li&gt;A的特征值均为正实数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Math"></category><category term="math"></category></entry><entry><title>pelican blog搭建</title><link href="/pelican-blogda-jian.html" rel="alternate"></link><published>2018-10-20T16:32:00+08:00</published><updated>2018-10-20T16:32:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-20:/pelican-blogda-jian.html</id><summary type="html">&lt;p&gt;pelican配置教程step by&amp;nbsp;step.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install pelican&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install Markdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt; to build a quick start version&amp;nbsp;project &lt;/li&gt;
&lt;li&gt;[Optional] &lt;code&gt;pip install typogrify&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;blog&amp;nbsp;metadata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Alexis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Metaireau&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Conan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Doyle&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;make&amp;nbsp;regenerate &lt;/li&gt;
&lt;li&gt;make&amp;nbsp;serve&lt;/li&gt;
&lt;li&gt;make&amp;nbsp;devserve&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/install.html"&gt;pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/typogrify/"&gt;typogrify&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="programing"></category></entry><entry><title>Matrix Calculus</title><link href="/matrix-calculus.html" rel="alternate"></link><published>2018-10-20T16:03:00+08:00</published><updated>2018-10-20T16:03:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-20:/matrix-calculus.html</id><summary type="html">&lt;p&gt;这篇文章总结矩阵微积分中使用的一些公式&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Matrix&amp;nbsp;Calculus&lt;/h2&gt;
&lt;h3&gt;Vector-by-Vector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial a}{\partial x} =&amp;nbsp;0\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial x}{\partial x} =&amp;nbsp;I\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial x}{\partial x} =&amp;nbsp;A\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial x^TA}{\partial x} =&amp;nbsp;A^T\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial au(x)}{\partial x} = a\frac{\partial u}{\partial&amp;nbsp;x}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scalar-by-Vector&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial a^Tx}{\partial x} =&amp;nbsp;a^T\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial u^Tv}{\partial x} = u^T\frac{\partial v}{\partial x} + v^T\frac{\partial u}{\partial&amp;nbsp;x}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial u^TAv}{\partial x} = u^TA\frac{\partial v}{\partial x} + v^TA^T\frac{\partial u}{\partial&amp;nbsp;x}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\frac{\partial x^TAx}{\partial x} = x^T(A^T +&amp;nbsp;A)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Matrix_calculus"&gt;Matrix&amp;nbsp;calculas&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Math"></category><category term="math"></category></entry><entry><title>Markdown语法介绍</title><link href="/markdownyu-fa-jie-shao.html" rel="alternate"></link><published>2018-10-14T21:14:00+08:00</published><updated>2018-10-14T21:14:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-14:/markdownyu-fa-jie-shao.html</id><summary type="html">&lt;p&gt;这篇文章介绍Markdown的语法，包括标题、引用、列表、代码、强调、链接、表格、分割线、图片&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Table of&amp;nbsp;Contents&lt;/h2&gt;
&lt;p&gt;This is a markdown file This is a markdown fileThis is a markdown file This is a markdown file This is a markdown file This is a markdown&amp;nbsp;file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#标题"&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#引用"&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#列表"&gt;列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#代码"&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#强调"&gt;强调&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#链接"&gt;链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#表格"&gt;表格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#分割线"&gt;分割线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#图片"&gt;图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;标题&lt;/h3&gt;
&lt;p&gt;Markdown共支持六级标题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # 一级标题
    ## 二级标题
    ### 三级标题
    #### 四级标题
    ##### 五级标题
    ###### 六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;引用&lt;/h3&gt;
&lt;p&gt;通过在段落的第一行最前面加上&lt;em&gt;&amp;gt;&lt;/em&gt;来使用引用:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是二级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3&gt;列表&lt;/h3&gt;
&lt;p&gt;列表项目一般放在最左边，项目标记后面要接一个空格&lt;/p&gt;
&lt;p&gt;&lt;em&gt;无序列表&lt;/em&gt;: 使用*,&amp;nbsp;+或者-标记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是无序列表&lt;/li&gt;
&lt;li&gt;这也是无序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;有序列表&lt;/em&gt;:&amp;nbsp;使用数字接一个英文句话&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;p&gt;使用&amp;#8220;`来包裹代码块即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;这是一段代码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;强调&lt;/h3&gt;
&lt;p&gt;这是&lt;em&gt;斜体&lt;/em&gt;, 这是&lt;strong&gt;加粗&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;链接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[说明](链接url)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;表格&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;th&gt;Third Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;分割线&lt;/h3&gt;
&lt;p&gt;可以使用三个以上-符号制作分割线&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;ABA&lt;/span&gt;
&lt;span class="gh"&gt;---&lt;/span&gt;
BAB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;图片&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Alt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://coding.net/help/doc/project/markdown.html"&gt;Markdown语法介绍&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="tool"></category></entry><entry><title>二分搜索的各种写法</title><link href="/er-fen-sou-suo-de-ge-chong-xie-fa.html" rel="alternate"></link><published>2018-10-14T21:04:00+08:00</published><updated>2018-10-14T21:04:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-14:/er-fen-sou-suo-de-ge-chong-xie-fa.html</id><summary type="html">&lt;p&gt;对于已排序的数组x[0..n-1]，想查找数t，若t在x中则返回其下标（如有多个重复，返回其中之一)，若t不在x中则返回-1。&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;对于已排序的数组x[0..n-1]，想查找数t，若t在x中则返回其下标（如有多个重复，返回其中之一)，若t不在x中则返回-1。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;binarysearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;如果我们希望确定t在数组中第一次出现的位置，我们可以在循环中保持x[l]&lt;t 且 x[u]&gt;=t&amp;nbsp;的特性，我们可以做以下修改:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;binarysearch2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// x[l] &amp;lt; t &amp;amp;&amp;amp; x[u] &amp;gt;= t &amp;amp;&amp;amp; l &amp;lt; u&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// l + 1 = u &amp;amp;&amp;amp; x[l] &amp;lt; t &amp;amp;&amp;amp; x[u] &amp;gt;= t&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;其实上述代码的p或者u就代表第一个大于或等于t的元素的位置，即STL里面的lower_bound函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;binarysearch3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// x[l] &amp;lt; t &amp;amp;&amp;amp; x[u] &amp;gt;= t &amp;amp;&amp;amp; l &amp;lt; u&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// l + 1 = u &amp;amp;&amp;amp; x[l] &amp;lt; t &amp;amp;&amp;amp; x[u] &amp;gt;= t&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;最后如果要实现STL里面的upper_bound函数，即返回第一个大于t的元素的位置我们可以这样做:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;binarysearch4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// x[l] &amp;lt;= t &amp;amp;&amp;amp; x[u] &amp;gt; t &amp;amp;&amp;amp; l &amp;lt; u&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// l + 1 = u &amp;amp;&amp;amp; x[l] &amp;lt;= t &amp;amp;&amp;amp; x[u] &amp;gt; t&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;写二分搜索函数的关键是保持循环不变式，即保证t与区间两端点之间的大小关系不变，这样就可以根据区间两端的大小关系来判断其是否是你需要的结果了。&lt;/p&gt;</content><category term="programming"></category><category term="algorithm"></category></entry><entry><title>统计推断复习</title><link href="/tong-ji-tui-duan-fu-xi.html" rel="alternate"></link><published>2018-10-14T20:52:00+08:00</published><updated>2018-10-14T20:52:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-14:/tong-ji-tui-duan-fu-xi.html</id><summary type="html">&lt;p&gt;统计推断,&amp;nbsp;总体是所研究对象的全体组成的集合称为总体。组成总体的每个元素(成员)称为个体。与总体相关的特征值称为参数。&lt;/p&gt;</summary><content type="html">&lt;h3&gt;总体&lt;/h3&gt;
&lt;p&gt;所研究对象的全体组成的集合称为总体。组成总体的每个元素(成员)称为个体。与总体相关的特征值称为参数。&lt;/p&gt;
&lt;h3&gt;样本&lt;/h3&gt;
&lt;p&gt;总体的任何一个子集合，称为从总体中抽取的样本。样本中包含个体的数目称为样本容量，通常记为n。因为抽取样本是为了对总体特征进行&lt;em&gt;推断&lt;/em&gt;，所以必须对抽样方法提出一定要求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机性:&amp;nbsp;总体中每个个体被抽到的概率是相等的。&lt;/li&gt;
&lt;li&gt;独立性: 每次观察X_1, X_2, &amp;#8230; ,&amp;nbsp;X_n是相互独立的随机变量。&lt;/li&gt;
&lt;li&gt;同分布性:&amp;nbsp;样本与总体同分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足上述条件的抽样方法称为&lt;em&gt;简单随机抽样&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;统计量&lt;/h3&gt;
&lt;p&gt;如果由样本构造一个函数g(X_1, X_2, &amp;#8230;, X_n), 且不含有任何未知参数，则称g(X_1, X_2, &amp;#8230;,&amp;nbsp;X_n)为统计量。&lt;/p&gt;
&lt;p&gt;常用的统计量包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;样本均值&lt;/li&gt;
&lt;li&gt;样本方差&lt;/li&gt;
&lt;li&gt;样本相关系数&lt;/li&gt;
&lt;li&gt;样本偏度和样本峰度&lt;/li&gt;
&lt;li&gt;样本变异系数&lt;/li&gt;
&lt;/ul&gt;</content><category term="Math"></category><category term="math"></category></entry><entry><title>Git命令整理</title><link href="/gitming-ling-zheng-li.html" rel="alternate"></link><published>2018-10-14T15:31:00+08:00</published><updated>2018-10-14T15:31:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-14:/gitming-ling-zheng-li.html</id><summary type="html">&lt;p&gt;首先需要明确三个概念，Git中的文件有三种状态: 已提交(commited), 已修改(modified)和已暂存(staged), 这里前两个概念比较好理解，已提交表示数据已保存(执行git commit指令后)，已修改表示修改了文件但还没有保存数据，而已暂存表示已经对当前经过修改的文件做了标记（执行git add&amp;nbsp;filename指令后)&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先需要明确三个概念，Git中的文件有三种状态: 已提交(commited), 已修改(modified)和已暂存(staged), 这里前两个概念比较好理解，已提交表示数据已保存(执行git commit指令后)，已修改表示修改了文件但还没有保存数据，而已暂存表示已经对当前经过修改的文件做了标记（执行git add&amp;nbsp;filename指令后)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与之相对的Git项目有三个不同的工作区的概念:&amp;nbsp;Git仓库、工作目录和暂存区域，之间的关系可以参考Git基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在首次使用Git前需要进行一些简单的配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置提交中使用的用户名: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name "yourname"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置提交中使用的邮件地址: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email "youremail@emai.com"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以使用以下指令检查你的配置: 
    *&lt;code&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟踪文件(或者添加文件到暂存区): &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add filename&lt;/code&gt;  &lt;code&gt;git add .&lt;/code&gt;                   //添加所有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提交文件(将暂存区文件保存到本地): &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit -m "your commit message"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;克隆仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --recursive url&lt;/code&gt;下载所有submodule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看当前文件处于哪个状态: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;忽略文件: &lt;ul&gt;
&lt;li&gt;修改.gitignore文件，可控制不希望被Git管理的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看文件中具体更新细节: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;      //&amp;nbsp;比较工作目录当前文件与暂存区域之间的差异&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff --staged&lt;/code&gt;   //&amp;nbsp;查看已暂存的将要添加到下次提交里的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跳过暂存区域直接提交: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit -a -m "your commit message"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除本地文件和暂存区文件: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rm filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除暂存区文件但保留本地文件: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rm --cached filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看提交历史: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新提交: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取消暂存的文件(注意与&lt;code&gt;git rm --cached&lt;/code&gt;的区别): &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撤销对文件的修改: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -- filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看远程仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加远程仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote add &amp;lt;shortname&amp;gt; &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从远程仓库抓取文件但是不合并: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch [remote-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从远程仓库抓取文件并合并: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推送到远程仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push [remote-name] [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看远程仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote show [remote-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;远程仓库重命名: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote rename [original-name] [new-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移除远程仓库: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote rm [original-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切换分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新建并切换分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -b [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout --orphan [branch-name]&lt;/code&gt; 创建一个全新分支，分支历史从零开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并到当前分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -d [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重命名分支:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -m [new-branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推送分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push [remote] [branch]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免输入密码: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global credential.helper cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟踪远程分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -b [branch-name] [remote-name]/[branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout --track [remote-name]/[branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改上游分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -u [remote-name]/[branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看所有跟踪分支: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -vv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变基: &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git rebase [branch-name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="tool"></category></entry><entry><title>VS Code使用Anaconda Prompt作为默认terminal</title><link href="/vs-codeshi-yong-anaconda-promptzuo-wei-mo-ren-terminal.html" rel="alternate"></link><published>2018-10-07T21:03:00+08:00</published><updated>2018-10-07T21:03:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-07:/vs-codeshi-yong-anaconda-promptzuo-wei-mo-ren-terminal.html</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;VS&lt;/span&gt; Code怎么使用使用Anaconda&amp;nbsp;Prompt作为默认terminal&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;在你自己的&lt;code&gt;User settings&lt;/code&gt;中添加下列代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;terminal.integrated.shell.windows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\\WINDOWS\\System32\\cmd.exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;terminal.integrated.shellArgs.windows&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/K&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:\\Users\\ben\\Anaconda3\\Scripts\\activate.bat C:\\Users\\ben\\Anaconda3&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;code&gt;terminal.integrated.shellArgs.windows&lt;/code&gt;后的参数可以通过右键点击&lt;code&gt;Anaconda Prompt&lt;/code&gt;选择&lt;code&gt;属性&lt;/code&gt;,复制目标一栏中后半部分路径获得&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://mscodingblog.blogspot.com/2017/08/setup-integrated-terminal-in-vs-code-to.html"&gt;http://mscodingblog.blogspot.com/2017/08/setup-integrated-terminal-in-vs-code-to.html&lt;/a&gt;&lt;/p&gt;</content><category term="Configuration"></category><category term="tool"></category></entry><entry><title>利用VS Code Snippets生成C++头文件保护符</title><link href="/li-yong-vs-code-snippetssheng-cheng-ctou-wen-jian-bao-hu-fu.html" rel="alternate"></link><published>2018-10-07T20:54:00+08:00</published><updated>2018-10-07T20:54:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-07:/li-yong-vs-code-snippetssheng-cheng-ctou-wen-jian-bao-hu-fu.html</id><summary type="html">&lt;p&gt;怎么利用VS Code&amp;nbsp;Snippets生成C++头文件保护符&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;将下列代码贴入你的&lt;code&gt;snippets&lt;/code&gt;中，然后在&lt;code&gt;cpp&lt;/code&gt;文件中输入&lt;code&gt;pre&lt;/code&gt;+&lt;code&gt;tab&lt;/code&gt;即可自动生成相关头文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Preprocessor of cpp file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prefix&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ifndef ${TM_FILENAME/(.*)(\\.)+(.*)/$${1:/upcase}_${3:/upcase}/}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#define ${TM_FILENAME/(.*)(\\.)+(.*)/$${1:/upcase}_${3:/upcase}/}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class ${TM_FILENAME/([a-z])(.*)(\\.)+(.*)/${1:/upcase}${2}/} {&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;};&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#endif&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Preprocessor of cpp and hpp file&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;每一个&lt;code&gt;snippet&lt;/code&gt;由&lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;和&lt;code&gt;description&lt;/code&gt;组成,其中&lt;code&gt;prefix&lt;/code&gt;表示你的快捷键符，&lt;code&gt;body&lt;/code&gt;是你的&lt;code&gt;snippet&lt;/code&gt;内容。
&lt;code&gt;$TM_FILENAME&lt;/code&gt;是系统定义的变量，表示当前文件的完整文件名，然后利用正则表达式生成对应的头文件保护符。&lt;/p&gt;
&lt;h3&gt;解决VS&amp;nbsp;Code中markdown的snippet无法自动补全&lt;/h3&gt;
&lt;p&gt;原因是markdown文件中的quickSuggetions默认是false, 因此在user&amp;nbsp;setting中添加下列代码即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;[markdown]&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;editor.quickSuggestions&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_global-snippets"&gt;https://code.visualstudio.com/docs/editor/userdefinedsnippets#_global-snippets&lt;/a&gt;
&lt;a href="https://github.com/Microsoft/vscode/issues/26108"&gt;https://github.com/Microsoft/vscode/issues/26108&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="tool"></category></entry><entry><title>解决VS Code在ubuntu下terminal无法显示下划线的问题</title><link href="/jie-jue-vs-codezai-ubuntuxia-terminalwu-fa-xian-shi-xia-hua-xian-de-wen-ti.html" rel="alternate"></link><published>2018-10-07T20:47:00+08:00</published><updated>2018-10-07T20:47:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-07:/jie-jue-vs-codezai-ubuntuxia-terminalwu-fa-xian-shi-xia-hua-xian-de-wen-ti.html</id><summary type="html">&lt;p&gt;怎么解决VS&amp;nbsp;Code在ubuntu下terminal无法显示下划线的问题&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;输入&lt;code&gt;ctrl + shift + P&lt;/code&gt; 打开命令面板搜索 &lt;code&gt;Open User Settings&lt;/code&gt; - &lt;code&gt;Open settings.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加&lt;code&gt;"editor.fontFamily": "'Ubuntu Mono', monospace"&lt;/code&gt;即可&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;VS&lt;/span&gt;&amp;nbsp;Code显示数学公式&lt;/h3&gt;
&lt;p&gt;输入&lt;code&gt;ctrl + shift + X&lt;/code&gt;搜索&lt;strong&gt; Markdown+Math &lt;/strong&gt;安装即可。一共有4种形式的texmath语法，我们可以按照自己的需求选择,可以通过下列代码修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;mdmath.delimiters&amp;quot;: &amp;quot;dollars&amp;quot; // 这里输入你需要的语法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Microsoft/vscode/issues/38133"&gt;https://github.com/Microsoft/vscode/issues/38133&lt;/a&gt;&lt;/p&gt;</content><category term="Configuration"></category><category term="tool"></category></entry><entry><title>C++ STL常用数据结构整理</title><link href="/c-stlchang-yong-shu-ju-jie-gou-zheng-li.html" rel="alternate"></link><published>2018-10-07T20:21:00+08:00</published><updated>2018-10-07T20:21:00+08:00</updated><author><name>sjtuzbx</name></author><id>tag:None,2018-10-07:/c-stlchang-yong-shu-ju-jie-gou-zheng-li.html</id><summary type="html">&lt;p&gt;vector, stack, queue, list, forward_list, deque, priority_queue,&amp;nbsp;set&amp;#8230;&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;vector&lt;ul&gt;
&lt;li&gt;插入push_back(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除erase(iterator position),&amp;nbsp;时间复杂度O(n)取决于删除的位置&lt;/li&gt;
&lt;li&gt;支持随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stack&lt;ul&gt;
&lt;li&gt;插入push(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除pop(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;不支持随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;queue&lt;ul&gt;
&lt;li&gt;插入push(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除pop(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;不支持随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list(双向链表)&lt;ul&gt;
&lt;li&gt;插入push_front(), push_back(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除pop_front(), pop_back(), erase(iterator position),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;不支持随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;forward_list(单链表)&lt;ul&gt;
&lt;li&gt;插入push_front(), insert_after(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除pop_front(), erase_after(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;不支持随机访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;deque(双端队列)&lt;ul&gt;
&lt;li&gt;插入push_front(), push_back(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;删除push_back(), pop_back(),&amp;nbsp;时间复杂度O(1)&lt;/li&gt;
&lt;li&gt;支持随机访问&lt;/li&gt;
&lt;li&gt;相对于list,&amp;nbsp;deque在中间位置插入速读较慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;priority_queue(优先级队列)&lt;ul&gt;
&lt;li&gt;插入push(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;删除pop(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;内部实现支持随机访问，但是优先级队列不支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;set(集合)&lt;ul&gt;
&lt;li&gt;利用二叉搜索树实现&lt;/li&gt;
&lt;li&gt;插入insert(), 时间复杂度O(log(n)),&amp;nbsp;如果给出插入位置则时间复杂度为O(1)&lt;/li&gt;
&lt;li&gt;删除erase(position), 时间复杂度O(1); erase(val),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;搜索find(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;支持lower_bound(), upper_bound(),&amp;nbsp;equal_range()操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unordered_set&lt;ul&gt;
&lt;li&gt;利用哈希表实现&lt;/li&gt;
&lt;li&gt;插入insert(),&amp;nbsp;时间复杂度平均情况O(1)，最坏情况O(n)&lt;/li&gt;
&lt;li&gt;删除erase(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;搜索find(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;不支持lower_bound(),&amp;nbsp;upper_bound()操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multiset&lt;ul&gt;
&lt;li&gt;能包括多个有相同值的元素&lt;/li&gt;
&lt;li&gt;利用二叉搜索树实现&lt;/li&gt;
&lt;li&gt;插入insert(), 时间复杂度O(log(n)),&amp;nbsp;如果给出插入位置则时间复杂度为O(1)&lt;/li&gt;
&lt;li&gt;删除erase(position), 时间复杂度O(1); erase(val),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;搜索find(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;支持lower_bound(), upper_bound(),&amp;nbsp;equal_range()操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unordered_multiset&lt;ul&gt;
&lt;li&gt;能包括多个有相同值的元素&lt;/li&gt;
&lt;li&gt;利用哈希表实现&lt;/li&gt;
&lt;li&gt;插入insert(),&amp;nbsp;时间复杂度平均情况O(1)，最坏情况O(n)&lt;/li&gt;
&lt;li&gt;删除erase(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;搜索find(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;不支持lower_bound(),&amp;nbsp;upper_bound()操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;map&lt;ul&gt;
&lt;li&gt;利用二叉搜索树实现&lt;/li&gt;
&lt;li&gt;插入insert(), 时间复杂度O(log(n)),&amp;nbsp;如果给出插入位置则时间复杂度为O(1)&lt;/li&gt;
&lt;li&gt;删除erase(position), 时间复杂度O(1); erase(val),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;搜索find(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;支持lower_bound(), upper_bound(),&amp;nbsp;equal_range()操作&lt;/li&gt;
&lt;li&gt;key-value对，支持[]访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unordered_map&lt;ul&gt;
&lt;li&gt;利用哈希表实现&lt;/li&gt;
&lt;li&gt;插入insert(),&amp;nbsp;时间复杂度平均情况O(1)，最坏情况O(n)&lt;/li&gt;
&lt;li&gt;删除erase(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;搜索find(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;不支持lower_bound(),&amp;nbsp;upper_bound()操作&lt;/li&gt;
&lt;li&gt;key-value对，支持[]访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multimap&lt;ul&gt;
&lt;li&gt;能包括多个有相同值的元素&lt;/li&gt;
&lt;li&gt;利用二叉搜索树实现&lt;/li&gt;
&lt;li&gt;插入insert(), 时间复杂度O(log(n)),&amp;nbsp;如果给出插入位置则时间复杂度为O(1)&lt;/li&gt;
&lt;li&gt;删除erase(position), 时间复杂度O(1); erase(val),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;搜索find(),&amp;nbsp;时间复杂度O(log(n))&lt;/li&gt;
&lt;li&gt;支持lower_bound(), upper_bound(),&amp;nbsp;equal_range()操作&lt;/li&gt;
&lt;li&gt;key-value对，不支持[]访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unordered_multimap&lt;ul&gt;
&lt;li&gt;能包括多个有相同值的元素&lt;/li&gt;
&lt;li&gt;利用哈希表实现&lt;/li&gt;
&lt;li&gt;插入insert(),&amp;nbsp;时间复杂度平均情况O(1)，最坏情况O(n)&lt;/li&gt;
&lt;li&gt;删除erase(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;搜索find(), 时间复杂度平均情况O(1),&amp;nbsp;最坏情况O(n)&lt;/li&gt;
&lt;li&gt;不支持lower_bound(),&amp;nbsp;upper_bound()操作&lt;/li&gt;
&lt;li&gt;key-value对，不支持[]访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="programming"></category><category term="programing"></category></entry></feed>